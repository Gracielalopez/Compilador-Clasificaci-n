
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 12 21:36:13 COT 2015
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 12 21:36:13 COT 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\003\000\002\002\004\000\002\003" +
    "\012\000\002\003\010\000\002\003\006\000\002\003\004" +
    "\000\002\003\003\000\002\003\012\000\002\003\010\000" +
    "\002\003\006\000\002\003\004\000\002\003\003\000\002" +
    "\003\012\000\002\003\010\000\002\003\006\000\002\003" +
    "\004\000\002\003\003\000\002\003\012\000\002\003\010" +
    "\000\002\003\006\000\002\003\004\000\002\003\003\000" +
    "\002\003\012\000\002\003\010\000\002\003\006\000\002" +
    "\003\004\000\002\003\003\000\002\003\012\000\002\003" +
    "\010\000\002\003\006\000\002\003\004\000\002\003\003" +
    "\000\002\003\012\000\002\003\010\000\002\003\006\000" +
    "\002\003\004\000\002\003\003\000\002\004\003\000\002" +
    "\005\003\000\002\006\003\000\002\007\003\000\002\010" +
    "\003\000\002\011\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\020\004\023\005\007\006\005\007\022\010" +
    "\015\011\021\012\016\001\002\000\004\002\132\001\002" +
    "\000\010\002\uffd6\013\uffd6\014\uffd6\001\002\000\010\002" +
    "\uffdd\013\120\014\121\001\002\000\010\002\uffdb\013\uffdb" +
    "\014\uffdb\001\002\000\010\002\uffe2\013\106\014\107\001" +
    "\002\000\010\002\uffe7\013\074\014\075\001\002\000\010" +
    "\002\uffec\013\062\014\063\001\002\000\010\002\ufff1\013" +
    "\050\014\051\001\002\000\010\002\ufff6\013\036\014\037" +
    "\001\002\000\010\002\uffda\013\uffda\014\uffda\001\002\000" +
    "\010\002\uffd8\013\uffd8\014\uffd8\001\002\000\010\002\ufffb" +
    "\013\024\014\025\001\002\000\004\002\001\001\002\000" +
    "\010\002\uffd9\013\uffd9\014\uffd9\001\002\000\010\002\uffd7" +
    "\013\uffd7\014\uffd7\001\002\000\010\002\uffdc\013\uffdc\014" +
    "\uffdc\001\002\000\004\004\023\001\002\000\004\002\ufffc" +
    "\001\002\000\006\013\027\014\030\001\002\000\004\004" +
    "\023\001\002\000\004\002\ufffd\001\002\000\006\013\032" +
    "\014\033\001\002\000\004\004\023\001\002\000\004\002" +
    "\ufffe\001\002\000\004\014\035\001\002\000\004\002\uffff" +
    "\001\002\000\004\005\007\001\002\000\004\002\ufff7\001" +
    "\002\000\006\013\041\014\042\001\002\000\004\005\007" +
    "\001\002\000\004\002\ufff8\001\002\000\006\013\044\014" +
    "\045\001\002\000\004\005\007\001\002\000\004\002\ufff9" +
    "\001\002\000\004\014\047\001\002\000\004\002\ufffa\001" +
    "\002\000\004\010\015\001\002\000\004\002\ufff2\001\002" +
    "\000\006\013\053\014\054\001\002\000\004\010\015\001" +
    "\002\000\004\002\ufff3\001\002\000\006\013\056\014\057" +
    "\001\002\000\004\010\015\001\002\000\004\002\ufff4\001" +
    "\002\000\004\014\061\001\002\000\004\002\ufff5\001\002" +
    "\000\004\011\021\001\002\000\004\002\uffed\001\002\000" +
    "\006\013\065\014\066\001\002\000\004\011\021\001\002" +
    "\000\004\002\uffee\001\002\000\006\013\070\014\071\001" +
    "\002\000\004\011\021\001\002\000\004\002\uffef\001\002" +
    "\000\004\014\073\001\002\000\004\002\ufff0\001\002\000" +
    "\004\012\016\001\002\000\004\002\uffe8\001\002\000\006" +
    "\013\077\014\100\001\002\000\004\012\016\001\002\000" +
    "\004\002\uffe9\001\002\000\006\013\102\014\103\001\002" +
    "\000\004\012\016\001\002\000\004\002\uffea\001\002\000" +
    "\004\014\105\001\002\000\004\002\uffeb\001\002\000\004" +
    "\007\022\001\002\000\004\002\uffe3\001\002\000\006\013" +
    "\111\014\112\001\002\000\004\007\022\001\002\000\004" +
    "\002\uffe4\001\002\000\006\013\114\014\115\001\002\000" +
    "\004\007\022\001\002\000\004\002\uffe5\001\002\000\004" +
    "\014\117\001\002\000\004\002\uffe6\001\002\000\004\006" +
    "\005\001\002\000\004\002\uffde\001\002\000\006\013\123" +
    "\014\124\001\002\000\004\006\005\001\002\000\004\002" +
    "\uffdf\001\002\000\006\013\126\014\127\001\002\000\004" +
    "\006\005\001\002\000\004\002\uffe0\001\002\000\004\014" +
    "\131\001\002\000\004\002\uffe1\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\024\002\003\003\017\004\016\005\013\006" +
    "\012\007\011\010\010\011\007\012\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
       	StringBuffer m = new StringBuffer("Error");
		System.out.println("Mensaje: "+message);
		System.out.println("info: "+info.toString());
		if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			/* Comprueba si el numero de línea es mayor o igual que cero */
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
				/*Comprueba si el numero de columna es mayoro igual que cero */
				if (s.right >= 0)
					m.append(", y columna "+(s.right+1));
			}
         if(info.toString().equals("#3")){
              System.out.println("Ingresar los animales según su clasificació");
              System.out.println("Animal Mamifero Incorrecto");
}
                if(info.toString().equals("#2")){
              System.out.println("Ingresar los animales según su clasificació");
              System.out.println("Animal Domestico Incorrecto");
}
       if(info.toString().equals("#4")){
              System.out.println("Ingresar los animales según su clasificació");
              System.out.println("Animal Ave Incorrecto");
}
         if(info.toString().equals("#11")){
              System.out.println("Parametro no valido");
              
}
              if(info.toString().equals("#7")){
              System.out.println("Ingresar los animales según su clasificació");
              System.out.println("Animal Reptil Incorrecto");
}
                 if(info.toString().equals("#6")){
              System.out.println("Ingresar los animales según su clasificació");
              System.out.println("Animal Salvaje Incorrecto");
}
                 if(info.toString().equals("#8")){
              System.out.println("Ingresar los animales según su clasificació");
              System.out.println("Animal Marino Incorrecto");
}
                   if(info.toString().equals("#5")){
              System.out.println("Ingresar los animales según su clasificació");
              System.out.println("Animal Roedor Incorrecto");
}
                 if(info.toString().equals("#0")){
              System.out.println("ERROR **Falta TokenResultado**");
             
}
                  if(info.toString().equals("#9")){
              System.out.println("ERROR **TokenOperador Incorecto");
              
}

                  if(info.toString().equals("#10")){
              System.out.println("ERROR **No ha ingresado ninguna clasificación");
              
}

		}
		m.append(" : "+message);
		System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
       //	report_error(message, info);
	//	System.exit(1);
 
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estructura7 ::= TokenAves 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura7",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estructura6 ::= TokenRoedores 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura6",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // estructura5 ::= TokenMarinos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura5",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // estructura4 ::= TokenReptiles 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura4",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // estructura3 ::= TokenSalvajes 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura3",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estructura2 ::= TokenMamiferos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura2",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estructura1 ::= TokenDomesticos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura1",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // linea ::= estructura7 
            {
              Object RESULT =null;
		RESULT =  ("Es un animal Ave");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // linea ::= estructura7 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Ave");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // linea ::= estructura7 TokenOperador estructura7 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Ave");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // linea ::= estructura7 TokenOperador estructura7 TokenOperador estructura7 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Ave");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // linea ::= estructura7 TokenOperador estructura7 TokenOperador estructura7 TokenOperador estructura7 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Ave");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // linea ::= estructura6 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Roedro");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // linea ::= estructura6 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Roedro");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // linea ::= estructura6 TokenOperador estructura6 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Roedor");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // linea ::= estructura6 TokenOperador estructura6 TokenOperador estructura6 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Roedor");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // linea ::= estructura6 TokenOperador estructura6 TokenOperador estructura6 TokenOperador estructura6 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Roedor");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // linea ::= estructura5 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Marino");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // linea ::= estructura5 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Marino");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // linea ::= estructura5 TokenOperador estructura5 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Marino");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // linea ::= estructura5 TokenOperador estructura5 TokenOperador estructura5 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Marino");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // linea ::= estructura5 TokenOperador estructura5 TokenOperador estructura5 TokenOperador estructura5 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Marino");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // linea ::= estructura4 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Reptil");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // linea ::= estructura4 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Reptil");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // linea ::= estructura4 TokenOperador estructura4 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Reptil");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // linea ::= estructura4 TokenOperador estructura4 TokenOperador estructura4 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Reptil");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // linea ::= estructura4 TokenOperador estructura4 TokenOperador estructura4 TokenOperador estructura4 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Reptil");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // linea ::= estructura3 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Salvaje");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // linea ::= estructura3 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Salvaje");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // linea ::= estructura3 TokenOperador estructura3 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ( "Es un animal Salvaje"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // linea ::= estructura3 TokenOperador estructura3 TokenOperador estructura3 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ( "Es un animal Salvaje"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // linea ::= estructura3 TokenOperador estructura3 TokenOperador estructura3 TokenOperador estructura3 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ( "Es un animal Salvaje"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // linea ::= estructura2 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Mamifero"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // linea ::= estructura2 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Mamifero");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // linea ::= estructura2 TokenOperador estructura2 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Mamifero");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // linea ::= estructura2 TokenOperador estructura2 TokenOperador estructura2 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Mamifero");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // linea ::= estructura2 TokenOperador estructura2 TokenOperador estructura2 TokenOperador estructura2 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Mamifero");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // linea ::= estructura1 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Domestico"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // linea ::= estructura1 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Domestico");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= estructura1 TokenOperador estructura1 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Domestico"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linea ::= estructura1 TokenOperador estructura1 TokenOperador estructura1 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Domestico"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // linea ::= estructura1 TokenOperador estructura1 TokenOperador estructura1 TokenOperador estructura1 TokenResultado 
            {
              Object RESULT =null;
		RESULT = ("Es un animal Domestico"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= linea 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		System.out.println(l);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

